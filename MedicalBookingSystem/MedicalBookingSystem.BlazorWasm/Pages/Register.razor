@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Rejestracja</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label>Hasło</label>
        <InputText class="form-control" @bind-Value="registerModel.Password" type="password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="mb-3">
        <label>Imię</label>
        <InputText class="form-control" @bind-Value="registerModel.FirstName" />
        <ValidationMessage For="@(() => registerModel.FirstName)" />
    </div>

    <div class="mb-3">
        <label>Nazwisko</label>
        <InputText class="form-control" @bind-Value="registerModel.LastName" />
        <ValidationMessage For="@(() => registerModel.LastName)" />
    </div>

    <div class="mb-3">
        <label>Data urodzenia</label>
        <InputDate class="form-control" @bind-Value="registerModel.DateOfBirth" />
        <ValidationMessage For="@(() => registerModel.DateOfBirth)" />
    </div>

    <div class="mb-3">
        <label>Numer telefonu</label>
        <InputText class="form-control" @bind-Value="registerModel.PhoneNumber" />
        <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
    </div>

    <button class="btn btn-primary" type="submit">Zarejestruj się</button>
    <button class="btn btn-link" @onclick="@(() => Navigation.NavigateTo("/"))">Masz konto? Zaloguj się</button>
    @if (!string.IsNullOrWhiteSpace(registerError))
    {
        <div class="alert alert-danger mt-3">@registerError</div>
    }
</EditForm>

@code {
    private RegisterDto registerModel = new();
    private string? registerError;

    private async Task HandleRegister()
    {
        registerError = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                registerError = "Rejestracja nie powiodła się: " + error;
            }
        }
        catch (Exception ex)
        {
            registerError = "Błąd rejestracji: " + ex.Message;
        }
    }

    public class RegisterDto
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Nieprawidłowy email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        [MinLength(8, ErrorMessage = "Hasło musi mieć co najmniej 8 znaków")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Imię jest wymagane")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Nazwisko jest wymagane")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Data urodzenia jest wymagana")]
        [MinAge(18)]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Numer telefonu jest wymagany")]
        [Phone(ErrorMessage = "Nieprawidłowy numer telefonu")]
        public string PhoneNumber { get; set; } = string.Empty;
    }
}
