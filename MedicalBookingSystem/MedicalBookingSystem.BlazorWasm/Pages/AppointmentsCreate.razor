@page "/appointments/create"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Zarezerwuj wizytę</MudText>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Dense Class="mt-2">@errorMessage</MudAlert>
    }

    <MudSelect T="int" Label="Wybierz lekarza"
               Value="@selectedDoctorId"
               ValueChanged="OnDoctorChanged"
               ValueExpression="() => selectedDoctorId">
        @foreach (var doctor in doctors)
        {
            <MudSelectItem Value="doctor.Id">@doctor.FirstName @doctor.LastName</MudSelectItem>
        }
    </MudSelect>

    @if (schedules?.Any() == true)
    {
        <MudTable Items="@schedules" Hover="true" Dense Class="mt-4">
            <HeaderContent>
                <MudTh>Data</MudTh>
                <MudTh>Godzina</MudTh>
                <MudTh>Akcja</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.StartTime.ToString("dd.MM.yyyy")</MudTd>
                <MudTd>@context.StartTime.ToString("HH:mm") - @context.EndTime.ToString("HH:mm")</MudTd>
                <MudTd>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => SelectSchedule(context))">Wybierz</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else if (selectedDoctorId != 0)
    {
        <MudText Class="mt-4" Color="Color.Warning">Brak dostępnych terminów.</MudText>
    }

    @if (selectedSlot != null)
    {
        <MudDivider Class="my-4" />
        <MudText Typo="Typo.subtitle1">Wybrany termin:</MudText>
        <MudText>@selectedSlot.StartTime.ToString("dddd, dd MMMM yyyy HH:mm")</MudText>
        <MudButton Color="Color.Success" Variant="Variant.Filled" Class="mt-2" OnClick="HandleCreate">Zarezerwuj wizytę</MudButton>
    }
</MudPaper>

@code {
    private List<DoctorDto> doctors = new();
    private List<DoctorScheduleDto> schedules = new();
    private DoctorScheduleDto? selectedSlot;
    private int selectedDoctorId;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            doctors = await Http.GetFromJsonAsync<List<DoctorDto>>("api/doctors/all");
        }
        catch (Exception ex)
        {
            errorMessage = $"Nie udało się pobrać listy lekarzy: {ex.Message}";
        }
    }

    private async Task OnDoctorChanged(int doctorId)
    {
        schedules.Clear();
        selectedSlot = null;

        if (doctorId == null)
            return;

        try
        {
            var result = await Http.GetFromJsonAsync<List<DoctorScheduleDto>>($"api/doctors/{doctorId}/schedule");
            schedules = result
                .Where(s => s.IsAvailable && s.StartTime.Date <= DateTime.Today.AddDays(30))
                .OrderBy(s => s.StartTime)
                .ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Nie udało się pobrać harmonogramu: {ex.Message}";
        }
    }

    private void SelectSchedule(DoctorScheduleDto schedule)
    {
        selectedSlot = schedule;
    }

    private async Task HandleCreate()
    {
        try
        {
            var patientIdStr = await localStorage.GetItemAsync<string>("patientId");
            if (!int.TryParse(patientIdStr, out int patientId))
            {
                errorMessage = "Nieprawidłowy identyfikator pacjenta.";
                return;
            }

            var appointment = new CreateAppointmentDto
            {
                DoctorId = selectedSlot.DoctorId,
                Date = selectedSlot.StartTime,
                PatientId = patientId
            };

            var response = await Http.PostAsJsonAsync("api/appointments", appointment);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/appointments");
            }
            else
            {
                errorMessage = "Nie udało się dodać wizyty: " + await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd przy zapisie wizyty: {ex.Message}";
        }
    }

    public class CreateAppointmentDto
    {
        public DateTime Date { get; set; }
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
    }

    public class DoctorDto
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
    }

    public class DoctorScheduleDto
    {
        public int Id { get; set; }
        public int DoctorId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool IsAvailable { get; set; }
    }
}
