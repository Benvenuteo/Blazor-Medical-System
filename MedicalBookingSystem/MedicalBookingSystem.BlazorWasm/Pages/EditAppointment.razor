@page "/appointments/edit/{appointmentId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edytuj wizytę</h3>

@if (isLoading)
{
    <p>Ładowanie danych wizyty...</p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="appointment" OnValidSubmit="UpdateAppointment">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="date" class="form-label">Nowa data</label>
            <InputDate id="date" class="form-control" @bind-Value="selectedDate" />
        </div>

        <div class="mb-3">
            <label for="time" class="form-label">Godzina</label>
            <input type="time" class="form-control" @bind="selectedTime" />
        </div>

        <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
    </EditForm>
}

@code {
    [Parameter]
    public int appointmentId { get; set; }

    private UpdateAppointmentDto appointment = new();
    private string errorMessage;
    private bool isLoading = true;

    private DateTime selectedDate = DateTime.Today;
    private TimeOnly selectedTime;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Tu możesz pobrać bieżące dane wizyty jeśli potrzebujesz
            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Błąd podczas ładowania danych: " + ex.Message;
            isLoading = false;
        }
    }

    private async Task UpdateAppointment()
    {
        try
        {
            appointment.NewDate = selectedDate.Date + selectedTime.ToTimeSpan();

            var response = await Http.PutAsJsonAsync($"api/appointments/{appointmentId}", appointment);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/appointments");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = "Nie udało się zaktualizować wizyty: " + error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Błąd zapisu wizyty: " + ex.Message;
        }
    }

    public enum AppointmentStatus
    {
        Scheduled,
        Completed,
        Cancelled
    }

    public class UpdateAppointmentDto
    {
        public DateTime NewDate { get; set; }
        public AppointmentStatus? Status { get; set; }
    }

}
